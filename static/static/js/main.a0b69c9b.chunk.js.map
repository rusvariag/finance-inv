{"version":3,"sources":["App.js","index.js"],"names":["App","socketRef","useRef","deviceRed","useState","undefined","status","setStatus","validationSchema","Yup","phoneNumber","matches","required","useEffect","current","socketIOClient","on","message","fetch","then","res","json","token","Device","warnings","catch","error","console","onSubmitHandler","values","a","params","phone","connect","addListener","log","className","initialValues","onSubmit","errors","touched","htmlFor","type","id","name","placeholder","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"iRAsGeA,EAzFH,WACV,IAAMC,EAAYC,mBACZC,EAAYD,mBAGlB,EAA4BE,wBAASC,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAMMC,EAAmBC,IAAW,CAClCC,YAAaD,MACVE,QAHH,0GAGwB,+BACrBC,SAAS,gBAIdC,qBAAU,WACRZ,EAAUa,QAAUC,IAAe,KACnCd,EAAUa,QAAQE,GAtBJ,aAsBkB,SAAAC,GAC9BV,EAAUU,MAGZC,MAAM,UACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,YAAgB,IAAbG,EAAY,EAAZA,MACPnB,EAAUW,QAAU,IAAIS,SAAOD,EAAO,CACpCE,UAAU,OAGbC,OAAM,SAAAC,GACLC,QAAQD,MAAM,SAAUA,QAE3B,IAGH,IAAME,EAAe,uCAAG,WAAMC,GAAN,eAAAC,EAAA,6DAClBC,EAAS,CAGXC,MAAM,OAAD,OAASH,EAAOnB,cAJD,SAOHP,EAAUW,QAAQmB,QAAQ,CAAEF,WAPzB,cAUjBG,YAAY,UAAU,WACzBP,QAAQQ,IAAI,2BAXQ,2CAAH,sDAerB,OACE,sBAAKC,UAAU,MAAf,UACE,sDACA,uBAAMA,UAAU,OAAhB,UACE,cAAC,IAAD,CACEC,cAAe,CAAE3B,YAAa,IAC9BF,iBAAkBA,EAClB8B,SAAUV,EAHZ,SAKG,gBAAGW,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAMJ,UAAU,OAAhB,UACE,uBAAOA,UAAU,QAAQK,QAAQ,cAAjC,uEAGA,cAAC,IAAD,CACEL,UAAU,cACVM,KAAK,OACLC,GAAG,cACHC,KAAK,cACLC,YAAY,iBAEbN,EAAO7B,aAAe8B,EAAQ9B,YAC7B,qBAAK0B,UAAU,QAAf,SAAwBG,EAAO7B,cAC7B,KACJ,wBAAQgC,KAAK,SAASN,UAAU,MAAhC,+BAMN,qBAAKA,UAAU,eAAf,2BACA,qBAAKA,UAAU,SAAf,SAAyBU,KAAKC,UAAUzC,YC5FhD0C,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a0b69c9b.chunk.js","sourcesContent":["// import stuff\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport socketIOClient from 'socket.io-client';\nimport { Device } from '@twilio/voice-sdk';\n\n// import styles\nimport './styles.css';\n\n// constants\nconst NEW_EVENT = 'newStatus';\n\nconst App = () => {\n  const socketRef = useRef();\n  const deviceRed = useRef();\n\n  // states\n  const [status, setStatus] = useState(undefined);\n\n  // validate form field\n  // TODO: build other test for phone number\n  const phoneRegExp =\n    /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n  const validationSchema = Yup.object({\n    phoneNumber: Yup.string()\n      .matches(phoneRegExp, '* Phone number is not valid')\n      .required('* Required'),\n  });\n\n  // start application services\n  useEffect(() => {\n    socketRef.current = socketIOClient('/');\n    socketRef.current.on(NEW_EVENT, message => {\n      setStatus(message);\n    });\n\n    fetch('/token')\n      .then(res => res.json())\n      .then(({ token }) => {\n        deviceRed.current = new Device(token, {\n          warnings: false,\n        });\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  }, []);\n\n  // submit handler\n  const onSubmitHandler = async values => {\n    var params = {\n      // get the phone number to call from the DOM\n      // MAYBE: add country choice\n      phone: `+972${values.phoneNumber}`,\n    };\n    // Twilio.Device.connect() returns a Call object\n    const call = await deviceRed.current.connect({ params });\n\n    // add listeners to the Call\n    call.addListener('accept', () => {\n      console.log('Call in progress ...');\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Twilio Outbound Call</h1>\n      <main className=\"main\">\n        <Formik\n          initialValues={{ phoneNumber: '' }}\n          validationSchema={validationSchema}\n          onSubmit={onSubmitHandler}\n        >\n          {({ errors, touched }) => (\n            <Form className=\"form\">\n              <label className=\"label\" htmlFor=\"phoneNumber\">\n                Enter Phone Number ( Israel only - without leading zero )\n              </label>\n              <Field\n                className=\"input-field\"\n                type=\"text\"\n                id=\"phoneNumber\"\n                name=\"phoneNumber\"\n                placeholder=\"Phone number\"\n              />\n              {errors.phoneNumber && touched.phoneNumber ? (\n                <div className='error'>{errors.phoneNumber}</div>\n              ) : null}\n              <button type=\"submit\" className=\"btn\">\n                get started\n              </button>\n            </Form>\n          )}\n        </Formik>\n        <div className=\"status-label\">Call status: </div>\n        <div className=\"status\">{JSON.stringify(status)}</div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}